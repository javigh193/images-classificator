{"ast":null,"code":"var _jsxFileName = \"/images_front/src/components/Classifier/Classifier.js\";\nimport React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport './Classifier.css';\nimport { Alert, Button, Spinner, Image } from 'react-bootstrap';\nimport axios from 'axios';\n\n//el clasificador es el componente encargado de recibir las imagenes del usuario\n//y enviarlas al backend para que realice la clasificación y las guarde\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Classifier extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //las imagenes cargadas para ser clasificadas\n      files: [],\n      //el componente está preparando algún elemento para renderizarlo\n      isLoading: false,\n      //se cargó una imagen recientemente\n      recentImage: null\n    };\n    //evento al soltar una imagen en la zona habilitada para ello\n    this.onDrop = files => {\n      this.setState({\n        files: [],\n        isLoading: true,\n        recentImage: null\n      });\n      this.loadImage(files);\n    };\n    //incluye la imagen en el estado del componente\n    this.loadImage = files => {\n      this.setState({\n        files,\n        isLoading: false\n      });\n    };\n    //cuando se está esperando por algún elemento se activa un spinner para\n    //que el usuario tenga una referencia visual\n    this.activateSpinner = () => {\n      this.setState({\n        files: [],\n        isLoading: true\n      });\n    };\n    this.deactivateSpinner = () => {\n      this.setState({\n        isLoading: false\n      });\n    };\n    //función asociada al botón de guardar imagen\n    //envía la imagen al backend para que la clasifique y la guarde en la base de datos\n    //axios permite trabajar de manera análoga a fetch, pero de manera más eficiente con \n    //el compromiso de trabajar en json\n    this.sendImageHandler = () => {\n      this.activateSpinner();\n      let formData = new FormData();\n      formData.append('picture', this.state.files[0], this.state.files[0].name);\n      axios.post('http://127.0.0.1:8000/api/images/', formData, {\n        headers: {\n          'accept': 'application/json',\n          'content-type': 'multipart/form-data'\n        }\n      }).then(resp => {\n        //solicitud de la imagen ya clasificada\n        this.getImageClass(resp);\n      }).catch(err => {\n        console.error(err);\n      });\n    };\n    //una vez la imagen ha sido clasificada, se la solicitamos al backend\n    this.getImageClass = obj => {\n      axios.get(`http://127.0.0.1:8000/api/images/${obj.data.id}/`, {\n        headers: {\n          'accept': 'application/json',\n          'content-type': 'multipart/form-data'\n        }\n      }).then(resp => {\n        //la imagen pasa a ser la guardada recientemente, se muestra\n        this.setState({\n          recentImage: resp\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n      this.deactivateSpinner();\n    };\n  }\n  //La información mostrada depende del estado del flujo de procesamiento de imágenes\n  //los botones solo aparecen cuando se dan las condiciones para poder ejecutar las funciones\n  //asociadas a los mismos, se emplean spinners para indicar que hay procesos en curso.\n  //Solo se muestra una imagen al mismo tiempo, la última en ser clasificada en esta sesión.\n  render() {\n    let files = this.state.files.map(file => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [file.name, \" - \", file.size, \" bytes\"]\n    }, file.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(Dropzone, {\n      onDrop: this.onDrop,\n      className: \"App\",\n      children: ({\n        isDragActive,\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps({\n            className: 'dropzone back'\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-muted\",\n            children: isDragActive ? \"Drop some images\" : \"Drag 'n' drop some files here, or click to select files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n          children: files\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), this.state.files.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"info\",\n          size: \"lg\",\n          className: \"mt-3\",\n          onClick: this.sendImageHandler,\n          children: \"Save Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), this.state.isLoading && /*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          role: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"visually-hidden\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), this.state.recentImage && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Alert, {\n            variant: \"primary\",\n            children: this.state.recentImage.data.classified\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Image, {\n            className: \"justify-content-center\",\n            src: this.state.recentImage.data.picture,\n            height: \"200\",\n            rounded: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Classifier;","map":{"version":3,"names":["React","Component","Dropzone","Alert","Button","Spinner","Image","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Classifier","constructor","args","state","files","isLoading","recentImage","onDrop","setState","loadImage","activateSpinner","deactivateSpinner","sendImageHandler","formData","FormData","append","name","post","headers","then","resp","getImageClass","catch","err","console","error","obj","get","data","id","render","map","file","children","size","fileName","_jsxFileName","lineNumber","columnNumber","className","isDragActive","getRootProps","getInputProps","length","variant","onClick","animation","role","classified","src","picture","height","rounded"],"sources":["/images_front/src/components/Classifier/Classifier.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport './Classifier.css';\nimport { Alert, Button, Spinner, Image } from 'react-bootstrap';\nimport axios from 'axios';\n\n//el clasificador es el componente encargado de recibir las imagenes del usuario\n//y enviarlas al backend para que realice la clasificación y las guarde\nclass Classifier extends Component {\n    state = {\n        //las imagenes cargadas para ser clasificadas\n        files: [],\n        //el componente está preparando algún elemento para renderizarlo\n        isLoading: false,\n        //se cargó una imagen recientemente\n        recentImage: null,\n    }\n\n    //evento al soltar una imagen en la zona habilitada para ello\n    onDrop = (files) => {\n        this.setState({\n            files: [],\n            isLoading: true,\n            recentImage: null,\n        })\n        this.loadImage(files)\n    }\n\n    //incluye la imagen en el estado del componente\n    loadImage = (files) => {\n        this.setState({\n            files,\n            isLoading: false\n            })\n    }\n\n    //cuando se está esperando por algún elemento se activa un spinner para\n    //que el usuario tenga una referencia visual\n    activateSpinner = () => {\n        this.setState({\n            files: [],\n            isLoading:true\n        })\n    }\n\n    deactivateSpinner = () => {\n        this.setState({isLoading:false})\n    }\n\n    //función asociada al botón de guardar imagen\n    //envía la imagen al backend para que la clasifique y la guarde en la base de datos\n    //axios permite trabajar de manera análoga a fetch, pero de manera más eficiente con \n    //el compromiso de trabajar en json\n    sendImageHandler = () => {\n        this.activateSpinner()\n        let formData = new FormData()\n        formData.append('picture', this.state.files[0], this.state.files[0].name)\n        axios.post('http://127.0.0.1:8000/api/images/', formData, {\n            headers: {\n                'accept': 'application/json',\n                'content-type': 'multipart/form-data'\n            }\n        })\n        .then(resp => {\n            //solicitud de la imagen ya clasificada\n            this.getImageClass(resp)\n        })\n        .catch((err) => {\n            console.error(err)\n        })\n    }\n\n    //una vez la imagen ha sido clasificada, se la solicitamos al backend\n    getImageClass = (obj) => {\n        axios.get(`http://127.0.0.1:8000/api/images/${obj.data.id}/`, {\n            headers: {\n                'accept': 'application/json',\n                'content-type': 'multipart/form-data'\n            }\n        })\n        .then(resp => {\n            //la imagen pasa a ser la guardada recientemente, se muestra\n            this.setState({ recentImage: resp })\n        })\n        .catch((err) => {\n            console.error(err)\n        })\n        this.deactivateSpinner()\n    }\n\n    //La información mostrada depende del estado del flujo de procesamiento de imágenes\n    //los botones solo aparecen cuando se dan las condiciones para poder ejecutar las funciones\n    //asociadas a los mismos, se emplean spinners para indicar que hay procesos en curso.\n    //Solo se muestra una imagen al mismo tiempo, la última en ser clasificada en esta sesión.\n    render() { \n        let files = this.state.files.map(file => (\n            <p key={file.name}>\n                {file.name} - {file.size} bytes\n            </p>\n        ));\n        return (\n            <Dropzone onDrop={this.onDrop} className='App'>\n                {({isDragActive, getRootProps, getInputProps}) => (\n                <section className=\"container\">\n                    <div {...getRootProps({className: 'dropzone back'})}>\n                        <input {...getInputProps()} />\n                        <p className='text-muted'>{isDragActive ? \"Drop some images\" : \"Drag 'n' drop some files here, or click to select files\"}</p>\n                    </div>\n                    <aside>\n                        {files}\n                    </aside>\n                    {this.state.files.length > 0 &&\n                        <Button variant='info' size='lg' className='mt-3' onClick={this.sendImageHandler}>Save Image</Button>\n                    }\n                    {this.state.isLoading &&\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </Spinner>\n                    }\n                    {this.state.recentImage &&\n                    <>\n                        <Alert variant='primary'>\n                            {this.state.recentImage.data.classified}\n                        </Alert>\n                        <Image className='justify-content-center'\n                            src={this.state.recentImage.data.picture}\n                            height='200'\n                            rounded\n                        />\n                    </>\n                    }\n                </section>\n                )}\n            </Dropzone>\n        );\n    }\n}\n \nexport default Classifier;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}