{"ast":null,"code":"var _jsxFileName = \"/images_front/src/components/ImageList/ImageList.js\";\nimport './ImageList.css';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Image from './Image';\nimport { Button, Spinner } from 'react-bootstrap';\n\n//se obtienen las imagenes guardadas en la base de datos, se muestran las más recientes,\n//pudiendo mostrarse más a petición del usuario\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass ImageList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //las imagenes obtenidas del backend \n      images: [],\n      //inicialmente, solo se ven las 3 últimas clasificadas\n      visible: 3,\n      //se está esperando por la carga de algún elemento\n      isLoading: true,\n      //se está esperando por la carga de nuevas imágenes\n      loadingMore: false\n    };\n    //se piden las imagenes al backend\n    this.getImages = () => {\n      axios.get('http://127.0.0.1:8000/api/images/', {\n        headers: {\n          'accept': 'application/json'\n        }\n      }).then(resp => {\n        this.setState({\n          //se guardan en el estado las imagenes enviadas por el backend\n          images: resp.data,\n          //se indica que ya se tienen las imagenes para renderizarlas\n          isLoading: false\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    };\n    //función asociada a un botón para poder ampliar de 2 en 2 las imagenes que se muestran\n    this.handleVisible = () => {\n      let visible = this.state.visible;\n      let new_visible = visible + 2;\n      this.setState({\n        //se indica que se están cargando nuevas imágenes\n        loadingMore: true,\n        visible: new_visible\n      });\n      //aquí se debería comprobar que las imágenes están listas para ser mostradas\n      this.setState({\n        loadingMore: false\n      });\n    };\n  }\n  //una vez el componente se monta, se solicitan las imágenes     \n  componentDidMount() {\n    this.getImages();\n  }\n  //Se muestra la cantidad de imágenes controlada por la variable de estado visible.\n  //Se pasa la información mediante props al componente Image.\n  //Se emplean spinners para indicar al usuario que hay procesos en marcha. \n  //Cuando no hay procesos en marcha se muestra al usuario un botón para poder solicitar más\n  //imágenes, si es que aún quedan imagenes por mostrar.\n  render() {\n    let images = this.state.images.slice(0, this.state.visible).map(img => {\n      return /*#__PURE__*/_jsxDEV(Image, {\n        picture: img.picture,\n        classification: img.classified\n      }, img.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: this.state.images.length === 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"No images classified\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [images, this.state.loadingMore ? /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"visually-hidden\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: this.state.images.length > this.state.visible ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              onClick: this.handleVisible,\n              children: \"Load More\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"There are no more images to load\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)\n          }, void 0, false)]\n        }, void 0, true)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default ImageList;","map":{"version":3,"names":["React","Component","axios","Image","Button","Spinner","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageList","constructor","args","state","images","visible","isLoading","loadingMore","getImages","get","headers","then","resp","setState","data","catch","err","console","error","handleVisible","new_visible","componentDidMount","render","slice","map","img","picture","classification","classified","id","fileName","_jsxFileName","lineNumber","columnNumber","className","children","animation","role","length","variant","size","onClick"],"sources":["/images_front/src/components/ImageList/ImageList.js"],"sourcesContent":["import './ImageList.css';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Image from './Image';\nimport { Button, Spinner } from 'react-bootstrap';\n\n//se obtienen las imagenes guardadas en la base de datos, se muestran las más recientes,\n//pudiendo mostrarse más a petición del usuario\nclass ImageList extends Component {\n    state = {\n        //las imagenes obtenidas del backend \n        images: [],\n        //inicialmente, solo se ven las 3 últimas clasificadas\n        visible: 3,\n        //se está esperando por la carga de algún elemento\n        isLoading: true,\n        //se está esperando por la carga de nuevas imágenes\n        loadingMore: false,\n     } \n\n    //una vez el componente se monta, se solicitan las imágenes     \n    componentDidMount() {\n        this.getImages()\n    } \n\n    //se piden las imagenes al backend\n    getImages = () => {\n        axios.get('http://127.0.0.1:8000/api/images/', {\n            headers: {\n                'accept': 'application/json'\n            }\n        })\n        .then(resp => {\n            this.setState({\n                //se guardan en el estado las imagenes enviadas por el backend\n                images: resp.data,\n                //se indica que ya se tienen las imagenes para renderizarlas\n                isLoading: false,\n            })\n        })\n        .catch((err) => {\n            console.error(err)\n        })\n    }\n\n    //función asociada a un botón para poder ampliar de 2 en 2 las imagenes que se muestran\n    handleVisible = () => {\n        let visible = this.state.visible\n        let new_visible = visible + 2\n        this.setState({\n            //se indica que se están cargando nuevas imágenes\n            loadingMore: true,\n            visible: new_visible,\n        })\n        //aquí se debería comprobar que las imágenes están listas para ser mostradas\n        this.setState({\n            loadingMore: false,\n        })\n    }\n\n    //Se muestra la cantidad de imágenes controlada por la variable de estado visible.\n    //Se pasa la información mediante props al componente Image.\n    //Se emplean spinners para indicar al usuario que hay procesos en marcha. \n    //Cuando no hay procesos en marcha se muestra al usuario un botón para poder solicitar más\n    //imágenes, si es que aún quedan imagenes por mostrar.\n    render() {\n        let images = this.state.images.slice(0, this.state.visible).map(img => {\n            return <Image key={img.id} picture={img.picture} classification={img.classified} />\n        }) \n        return (\n            <div className='wrapper'>\n                {this.state.isLoading ?\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n                :\n                <>  \n                    {this.state.images.length === 0 ?\n                        <h1>No images classified</h1>\n                    :\n                    <>\n                        {images}\n                        {this.state.loadingMore ?\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </Spinner>\n                        :\n                        <>\n                            {this.state.images.length > this.state.visible ?\n                            <Button variant='primary' size='lg' onClick={this.handleVisible}>Load More</Button>\n                            :\n                            <p>There are no more images to load</p>\n                            }\n                        </>\n                        }\n                    </>\n                    }\n                </>\n                }\n            </div>\n        );\n    }\n}\n \nexport default ImageList;"],"mappings":";AAAA,OAAO,iBAAiB;AACxB,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,MAAM,EAAEC,OAAO,QAAQ,iBAAiB;;AAEjD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,SAAS,SAAST,SAAS,CAAC;EAAAU,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC9BC,KAAK,GAAG;MACJ;MACAC,MAAM,EAAE,EAAE;MACV;MACAC,OAAO,EAAE,CAAC;MACV;MACAC,SAAS,EAAE,IAAI;MACf;MACAC,WAAW,EAAE;IAChB,CAAC;IAOF;IAAA,KACAC,SAAS,GAAG,MAAM;MACdhB,KAAK,CAACiB,GAAG,CAAC,mCAAmC,EAAE;QAC3CC,OAAO,EAAE;UACL,QAAQ,EAAE;QACd;MACJ,CAAC,CAAC,CACDC,IAAI,CAACC,IAAI,IAAI;QACV,IAAI,CAACC,QAAQ,CAAC;UACV;UACAT,MAAM,EAAEQ,IAAI,CAACE,IAAI;UACjB;UACAR,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC,CAAC,CACDS,KAAK,CAAEC,GAAG,IAAK;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IAED;IAAA,KACAG,aAAa,GAAG,MAAM;MAClB,IAAId,OAAO,GAAG,IAAI,CAACF,KAAK,CAACE,OAAO;MAChC,IAAIe,WAAW,GAAGf,OAAO,GAAG,CAAC;MAC7B,IAAI,CAACQ,QAAQ,CAAC;QACV;QACAN,WAAW,EAAE,IAAI;QACjBF,OAAO,EAAEe;MACb,CAAC,CAAC;MACF;MACA,IAAI,CAACP,QAAQ,CAAC;QACVN,WAAW,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;EAAA;EAtCD;EACAc,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACb,SAAS,CAAC,CAAC;EACpB;EAqCA;EACA;EACA;EACA;EACA;EACAc,MAAMA,CAAA,EAAG;IACL,IAAIlB,MAAM,GAAG,IAAI,CAACD,KAAK,CAACC,MAAM,CAACmB,KAAK,CAAC,CAAC,EAAE,IAAI,CAACpB,KAAK,CAACE,OAAO,CAAC,CAACmB,GAAG,CAACC,GAAG,IAAI;MACnE,oBAAO5B,OAAA,CAACJ,KAAK;QAAciC,OAAO,EAAED,GAAG,CAACC,OAAQ;QAACC,cAAc,EAAEF,GAAG,CAACG;MAAW,GAA7DH,GAAG,CAACI,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyD,CAAC;IACvF,CAAC,CAAC;IACF,oBACIpC,OAAA;MAAKqC,SAAS,EAAC,SAAS;MAAAC,QAAA,EACnB,IAAI,CAAChC,KAAK,CAACG,SAAS,gBACrBT,OAAA,CAACF,OAAO;QAACyC,SAAS,EAAC,QAAQ;QAACC,IAAI,EAAC,QAAQ;QAAAF,QAAA,eACrCtC,OAAA;UAAMqC,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAAC;QAAU;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,gBAEVpC,OAAA,CAAAE,SAAA;QAAAoC,QAAA,EACK,IAAI,CAAChC,KAAK,CAACC,MAAM,CAACkC,MAAM,KAAK,CAAC,gBAC3BzC,OAAA;UAAAsC,QAAA,EAAI;QAAoB;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,gBAEjCpC,OAAA,CAAAE,SAAA;UAAAoC,QAAA,GACK/B,MAAM,EACN,IAAI,CAACD,KAAK,CAACI,WAAW,gBACvBV,OAAA,CAACF,OAAO;YAACyC,SAAS,EAAC,QAAQ;YAACC,IAAI,EAAC,QAAQ;YAAAF,QAAA,eACrCtC,OAAA;cAAMqC,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAAC;YAAU;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC,gBAEVpC,OAAA,CAAAE,SAAA;YAAAoC,QAAA,EACK,IAAI,CAAChC,KAAK,CAACC,MAAM,CAACkC,MAAM,GAAG,IAAI,CAACnC,KAAK,CAACE,OAAO,gBAC9CR,OAAA,CAACH,MAAM;cAAC6C,OAAO,EAAC,SAAS;cAACC,IAAI,EAAC,IAAI;cAACC,OAAO,EAAE,IAAI,CAACtB,aAAc;cAAAgB,QAAA,EAAC;YAAS;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,gBAEnFpC,OAAA;cAAAsC,QAAA,EAAG;YAAgC;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC,gBAEzC,CAAC;QAAA,eAEL;MAAC,gBAEL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF,CAAC;EAEd;AACJ;AAEA,eAAejC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}